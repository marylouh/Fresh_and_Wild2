@model FreshAndWild2.ViewModels.AdhesionViewModel
@{ Layout = null;
    ViewBag.title = "Adhesion"; }

<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <title>Adhésion Fresh & Wild</title>
    <meta content="Mangez frais, mangez bio !" name="description">
    <meta content="AMAP, bio, nourriture, santé" name="keywords">

    <!-- Template Main CSS File -->
    <link href="~/css/adhesion.css" rel="stylesheet">

</head>

<body>

    <form id="regForm" action="/Adherent/CreerAdherent" method="post">

        <h1>Adhérer</h1>

        <div class="tab">
            Identité (les champs avec * sont obligatoires)
            <p><input required id="prenom" type="text" placeholder="Prénom*" name="Adherent.Prenom"></p>
            <p><input required id="nom" type="text" placeholder="Nom*" name="Adherent.Nom"></p>
        </div>

        <div class="tab">
            Adresse (les champs avec * sont obligatoires)
            <p><input required id="numero" type="number" placeholder="Numéro*" name="Adresse.NumVoie"></p>
            <p><input type="text" placeholder="Bis, Ter..." name="Adresse.Complement"></p>
            <p><input required id="libelleVoie" type="text" placeholder="Nom de la Voie*" name="Adresse.LibelleVoie"></p>
            <p><input type="text" placeholder="Lieu-Dit" name="Adresse.LieuDit"></p>
            <p><input type="text" placeholder="Complément (bâtiment, appartement,...)" name="Adresse.ComplementAdresse"></p>
            <p><input required id="codePostal" type="number" placeholder="Code Postal*" name="Adresse.CodePostal"></p>
            <p><input required id="commune" type="text" placeholder="Commune*" name="Adresse.Commune"></p>
        </div>
        <div class="tab">
            Informations de contact (requis)
            <p><input required id="email" type="email" placeholder="E-mail*" name="Adherent.Email"></p>
            <p><input required id="telephone" type="tel" placeholder="Téléphone*" name="Adherent.Telephone"></p>
        </div>

        <div class="tab">
            Mot de passe
            <p><input required id="motDePasse" type="password" placeholder="Mot de passe*" name="Adherent.MotDePasseConnexion"></p>
            <input type="submit" name="Soumettre" value="Soumettre" />
        </div>

        <div style="overflow:auto;">
            <div style="float:right;">
                <button type="button" id="prevBtn" onclick="nextPrev(-1)">Précédent</button>
                <button type="button" id="nextBtn" onclick="nextPrev(1)">Suivant</button>
            </div>
        </div>

    <!-- Circles which indicates the steps of the form: -->
        <div style="text-align:center;margin-top:40px;">
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
        </div>

    </form>

    <script type="text/javascript" src="~/Scripts/jquery-3.3.1.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.validate-vsdoc.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.validate.unobtrusive.js"></script>

    <script>

        var currentTab = 0; // Current tab is set to be the first tab (0)
        showTab(currentTab); // Display the current tab

        function showTab(n) {
            // This function will display the specified tab of the form ...
            var x = document.getElementsByClassName("tab");
            x[n].style.display = "block";
            // ... and fix the Previous/Next buttons:
            if (n == 0 || n >= 4) {
                document.getElementById("prevBtn").style.display = "none";
            } else {
                document.getElementById("prevBtn").style.display = "inline";
            }
            if (n == 3) {
                document.getElementById("nextBtn").style.display = "none";
            } else {
                document.getElementById("nextBtn").style.display = "inline";
                document.getElementById("nextBtn").innerHTML = "Suivant";
            }
            // ... and run a function that displays the correct step indicator:
            fixStepIndicator(n)
        }

        function nextPrev(n) {
            // This function will figure out which tab to display
            var x = document.getElementsByClassName("tab");
            // Exit the function if any field in the current tab is invalid:
            if (n == 1 && !validateForm()) return false;
            // Hide the current tab:
            x[currentTab].style.display = "none";
            // Increase or decrease the current tab by 1:
            currentTab = currentTab + n;

            // If you have reached the end of the form... :
            if (currentTab == x.length) {
            //...the form gets submitted:
                document.getElementById('regForm').submit();
                
                return false;
            }

            // Otherwise, display the correct tab:
            showTab(currentTab);
        }

        function validateForm() {
            // This function deals with validation of the form fields
            var x, y, i, valid = true;

            x = document.getElementsByClassName("tab");
            y = x[currentTab].getElementsByTagName("input");
            // A loop that checks every input field in the current tab:
            for (i = 0; i < y.length; i++) {
                // If a field is empty...
                if (y[i].value == "" && y[i].hasAttribute("required")) {
                    // add an "invalid" class to the field:
                    y[i].className += " invalid";
                    // and set the current valid status to false:
                    valid = false;
                }

                @*} else if (!nom.match(Model.Adherent.Nom) || !prenom.match(Model.Adherent.Prenom)
                    || !email.match(Model.Adherent.Email) || !telephone.match(Model.Adherent.Telephone)
                    || !motDePasse.match(Model.Adherent.MotDePasseConnexion) || !numero.match(Model.Adresse.Numero)
                    || !libelleVoie.match(Model.Adresse.LibelleVoie) || !codePostal.match(Model.Adresse.CodePostal)
                    || !commune.match(Model.Adresse.Commune)) {

                    y[i].className += " invalid";
                    return false;
                }*@
            }
            // If the valid status is true, mark the step as finished and valid:
            if (valid) {
                document.getElementsByClassName("step")[currentTab].className += " finish";
            }
            return valid; // return the valid status
        }

        function fixStepIndicator(n) {
            // This function removes the "active" class of all steps...
            var i, x = document.getElementsByClassName("step");
            if (i == x.length) {
                document.getElementByClassName("step").style.display = "none";
            }
            for (i = 0; i < x.length; i++) {
                x[i].className = x[i].className.replace(" active", "");
            }
            //... and adds the "active" class to the current step:
            x[n].className += " active";
        }

    </script>

</body>

</html>